import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';

class NutritionService {
  // Mock API Configuration
  static const String _mockApiBaseUrl = ApiConfig.mockApiBaseUrl;
  static const String _mockApiEndpoint = ApiConfig.mockApiEndpoint;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Mock API
  static Future<bool> testMockAPIConnection() async {
    try {
      print('üß™ Testing MockAPI connection...');
      final url = Uri.parse('$_mockApiBaseUrl$_mockApiEndpoint');
      final response = await http.get(url);
      
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        print('‚úÖ MockAPI connected successfully - ${data.length} items available');
        return true;
      } else {
        print('‚ùå MockAPI connection failed - Status: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå MockAPI connection error: $e');
      return false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Mock API (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
  static Future<List<Map<String, dynamic>>> getAllMockAPIData() async {
    try {
      final url = Uri.parse('$_mockApiBaseUrl$_mockApiEndpoint');
      final response = await http.get(url);
      
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        return data.cast<Map<String, dynamic>>();
      }
      return [];
    } catch (e) {
      print('‚ùå Error fetching all MockAPI data: $e');
      return [];
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á MockAPI
  static Future<bool> postToMockAPI(Map<String, dynamic> data) async {
    try {
      final url = Uri.parse('$_mockApiBaseUrl$_mockApiEndpoint');
      
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode(data),
      );
      
      return response.statusCode == 201; // MockAPI returns 201 for successful creation
    } catch (e) {
      print('‚ùå Error posting to MockAPI: $e');
      return false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô MockAPI
  static Future<bool> clearMockAPI() async {
    try {
      print('üóëÔ∏è Clearing all data from MockAPI...');
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
      final url = Uri.parse('$_mockApiBaseUrl$_mockApiEndpoint');
      final response = await http.get(url);
      
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        
        // ‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        for (var item in data) {
          final deleteUrl = Uri.parse('$_mockApiBaseUrl$_mockApiEndpoint/${item['id']}');
          await http.delete(deleteUrl);
          await Future.delayed(const Duration(milliseconds: 200));
        }
        
        print('‚úÖ MockAPI cleared successfully');
        return true;
      }
      
      return false;
    } catch (e) {
      print('‚ùå Error clearing MockAPI: $e');
      return false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ MockAPI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  static Future<NutritionData?> getNutritionData(String foodName) async {
    try {
      // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
      String cleanFoodName = foodName.trim().toLowerCase();
      print('üîç Searching for: "$cleanFoodName"');
      
      // ‡πÉ‡∏ä‡πâ Mock API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      print('üåê Using Mock API...');
      return await _fetchFromMockAPI(cleanFoodName);
      
    } catch (e) {
      print('Error fetching nutrition data: $e');
      return null;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MockAPI
  static Future<NutritionData?> _fetchFromMockAPI(String foodName) async {
    try {
      print('üì° [MockAPI] Calling Mock API for: "$foodName"');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mock API
      final url = Uri.parse('$_mockApiBaseUrl$_mockApiEndpoint');
      print('üåê [MockAPI] URL: $url');
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Mock API
      final response = await http.get(
        url,
        headers: {
          'Content-Type': 'application/json',
        },
      );
      
      print('üìä [MockAPI] Response Status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        print('üìã [MockAPI] Data Length: ${data.length} items');
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        for (var item in data) {
          String itemName = (item['name'] ?? '').toString().toLowerCase();
          print('üîç [MockAPI] Checking: "$itemName" vs "$foodName"');
          
          if (itemName == foodName.toLowerCase() || 
              itemName.contains(foodName.toLowerCase()) ||
              foodName.toLowerCase().contains(itemName)) {
            
            print('‚úÖ [MockAPI] Match found: ${item['name']} (${item['calories']} cal)');
            return NutritionData(
              calories: (item['calories'] ?? 0).toDouble(),
              protein: (item['protein'] ?? 0).toDouble(),
              carbs: (item['carbs'] ?? item['carb'] ?? 0).toDouble(), // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á carbs ‡πÅ‡∏•‡∏∞ carb
              fat: (item['fat'] ?? 0).toDouble(),
              fiber: (item['fiber'] ?? 0).toDouble(),
              sugar: (item['sugar'] ?? 0).toDouble(),
            );
          }
        }
        
        print('‚ùå [MockAPI] No match found for "$foodName"');
        return null;
      }
      
      print('‚ùå [MockAPI] Request failed with status: ${response.statusCode}');
      return null;
    } catch (e) {
      print('‚ùå [MockAPI] Error: $e');
      return null;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  static NutritionData getDefaultNutrition(int calories) {
    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å config
    return NutritionData(
      calories: calories.toDouble(),
      protein: calories * ApiConfig.defaultProteinPercentage / ApiConfig.proteinCaloriesPerGram,
      carbs: calories * ApiConfig.defaultCarbsPercentage / ApiConfig.carbsCaloriesPerGram,
      fat: calories * ApiConfig.defaultFatPercentage / ApiConfig.fatCaloriesPerGram,
      fiber: calories * ApiConfig.defaultFiberPercentage,
      sugar: calories * ApiConfig.defaultSugarPercentage / ApiConfig.carbsCaloriesPerGram,
    );
  }
}

class NutritionData {
  final double calories;
  final double protein;  // ‡∏Å‡∏£‡∏±‡∏°
  final double carbs;    // ‡∏Å‡∏£‡∏±‡∏°
  final double fat;      // ‡∏Å‡∏£‡∏±‡∏°
  final double fiber;    // ‡∏Å‡∏£‡∏±‡∏°
  final double sugar;    // ‡∏Å‡∏£‡∏±‡∏°

  NutritionData({
    required this.calories,
    required this.protein,
    required this.carbs,
    required this.fat,
    required this.fiber,
    required this.sugar,
  });

  Map<String, dynamic> toJson() {
    return {
      'calories': calories,
      'protein': protein,
      'carbs': carbs,
      'fat': fat,
      'fiber': fiber,
      'sugar': sugar,
    };
  }

  factory NutritionData.fromJson(Map<String, dynamic> json) {
    return NutritionData(
      calories: (json['calories'] ?? 0).toDouble(),
      protein: (json['protein'] ?? 0).toDouble(),
      carbs: (json['carbs'] ?? 0).toDouble(),
      fat: (json['fat'] ?? 0).toDouble(),
      fiber: (json['fiber'] ?? 0).toDouble(),
      sugar: (json['sugar'] ?? 0).toDouble(),
    );
  }
}
